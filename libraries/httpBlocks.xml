<blocks app="NetsBlox 1.30.3, http://netsblox.org" version="1.30.3"><block-definition collabId="item_0_94" s="listify %&apos;jsonString&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:os dados JSON _ em formato de lista&#xD;</translations><inputs><input type="%mlt"></input></inputs><script><block collabId="item_0_87" s="doReport"><block collabId="item_0_86" s="evaluate"><block collabId="item_0_85" s="reportJSFunction"><list><l>jsonString</l></list><l>return listify(JSON.parse(jsonString));&#xD;&#xD;function listify(jsonObject) {&#xD;  if (jsonObject instanceof Array) {&#xD;    return new List(jsonObject.map(function(eachElement) { return listify(eachElement)}));&#xD;  } else if (jsonObject instanceof Object) {&#xD;    return new List(Object.keys(jsonObject).map(function(eachKey) { return new List([eachKey,listify(jsonObject[eachKey])])} ))&#xD;  } else {&#xD;    return jsonObject&#xD;  }&#xD;}</l></block><list><block collabId="item_0_80" var="jsonString"/></list></block></block></script></block-definition><block-definition collabId="item_0_79" s="value at key %&apos;key&apos; of %&apos;lst&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:o valor com chave _ em _&#xD;</translations><inputs><input type="%s"></input><input type="%l"></input></inputs><script><block collabId="item_0_71" s="doWarp"><script><block collabId="item_0_69" s="doForEach"><l>each item</l><block collabId="item_0_67" var="lst"/><script><block collabId="item_0_65" s="doIf"><block collabId="item_0_64" s="reportEquals"><block collabId="item_0_63" s="reportListItem"><l>1</l><block collabId="item_0_61" var="each item"/></block><block collabId="item_0_60" var="key"/></block><script><block collabId="item_0_58" s="doReport"><block collabId="item_0_57" s="reportListItem"><l>2</l><block collabId="item_0_55" var="each item"/></block></block></script></block></script></block></script></block><block collabId="item_0_54" s="doReport"><l></l></block></script></block-definition><block-definition collabId="item_0_52" s="%&apos;method&apos; url: %&apos;url&apos; send: %&apos;payload&apos; headers: %&apos;headers&apos;" type="reporter" category="sensing"><header></header><code></code><translations>pt:a resposta a _ de _ enviando _ e cabeçalhos _&#xD;</translations><inputs><input type="%s" readonly="true">GET<options>GET&#xD;POST&#xD;PUT&#xD;DELETE</options></input><input type="%s">https://snap.berkeley.edu</input><input type="%s"></input><input type="%mult%l" readonly="true"></input></inputs><script><block collabId="item_0_41" s="doReport"><block collabId="item_5" s="reportHTTPRequest"><block collabId="item_7" var="method"/><block collabId="item_8" var="url"/><block collabId="item_9" var="payload"/><block collabId="item_10" var="headers"/></block></block></script></block-definition><block-definition collabId="item_0_26" s="key: %&apos;key&apos; value: %&apos;value&apos;" type="reporter" category="operators"><header></header><code></code><translations>pt:um par (chave: _ , valor: _ )&#xD;</translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block collabId="item_0_18" s="doReport"><block collabId="item_0_17" s="reportNewList"><list><block collabId="item_0_15" var="key"/><block collabId="item_0_14" var="value"/></list></block></block></script></block-definition><block-definition collabId="item_0_13" s="current location" type="reporter" category="sensing"><comment collabId="item_0_12" w="200" collapsed="false">Reports a three-item list containing the latitude and longitude of the user, and the precision of the measurements.  Works only if the user allows snap.berkeley.edu access to location data.  Some browsers also require an HTTPS connection to Snap!.</comment><header></header><code></code><translations>pt:a localização actual do dispositivo&#xD;</translations><inputs></inputs><script><block collabId="item_0_6" s="doReport"><block collabId="item_0_5" s="evaluate"><block collabId="item_0_4" s="reportJSFunction"><list><l>proc</l></list><l>if (!proc.geostarted) {&#xD;  var geo = navigator.geolocation;&#xD;  var cords = [];&#xD;  var options = {&#xD;    enableHighAccuracy: false,&#xD;  };&#xD;&#xD;  function success(pos) {&#xD;    console.log(pos);&#xD;    proc.geocords = [pos.coords.latitude,&#xD;                     pos.coords.longitude,&#xD;                     pos.coords.accuracy];&#xD;  }&#xD;&#xD;  function error(err) {&#xD;    alert("ERROR " + err.code + ": " + err.message);&#xD;  }&#xD;  proc.geostarted = true;&#xD;  proc.geocords = null;&#xD;  console.log("starting geolocation")&#xD;  geo.getCurrentPosition(success, error, options);&#xD;} else if (proc.geocords) {&#xD;  var cords = proc.geocords;&#xD;  proc.geostarted = null;&#xD;  proc.geocords = null;&#xD;  console.log("returning");&#xD;  return new List(cords);&#xD;} else {&#xD;  console.log("yielding");&#xD;  proc.pushContext(&apos;doYield&apos;);&#xD;  proc.pushContext();&#xD;}</l></block><list></list></block></block></script></block-definition></blocks>